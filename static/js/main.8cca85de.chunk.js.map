{"version":3,"sources":["Game.js","index.js"],"names":["Square","props","className","onClick","value","Board","useState","Array","fill","board","setBoard","whiteIsNext","setWhiteIsNext","x","y","position","setPosition","renderSquare","j","i","newBoard","JSON","parse","stringify","calculateWinner","handleClick","status","winner","map","columnIndex","rowIndex","type","class","window","location","reload","Game","arr","chessColor","n1","n2","n3","n4","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cca85de.chunk.js","sourcesContent":["import './App.css'\nimport { React, useState } from 'react'\nimport { calculateWinner } from './index'\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nfunction Board() {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)))\n  const [whiteIsNext, setWhiteIsNext] = useState(true)\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  })\n\n  const handleClick = (y, x) => {\n    const newBoard = JSON.parse(JSON.stringify(board))\n    if (\n      calculateWinner(\n        position.y,\n        position.x,\n        newBoard,\n        newBoard[position.y][position.x]\n      ) ||\n      newBoard[y][x] !== null // 如果該位置已有子就不能再下\n    ) {\n      return\n    }\n    newBoard[y][x] = whiteIsNext ? '⚫' : '⚪'\n\n    const positionX = x\n    const positionY = y\n\n    setPosition({\n      x: positionX,\n      y: positionY\n    })\n    setBoard(newBoard)\n    setWhiteIsNext(!whiteIsNext)\n  }\n\n  function renderSquare(j, i) {\n    return <Square value={board[j][i]} onClick={() => handleClick(j, i)} />\n  }\n\n  const winner = calculateWinner(\n    position.y,\n    position.x,\n    board,\n    board[position.y][position.x]\n  )\n\n  let status\n  if (winner) {\n    status = `Winner: ${winner}`\n  } else {\n    status = 'Next player: ' + (whiteIsNext ? '⚫' : '⚪')\n  }\n\n  return (\n    <div>\n      {board.map((y, columnIndex) => {\n        return (\n          <div className=\"board-row\" key={columnIndex}>\n            {board.map((x, rowIndex) => renderSquare(columnIndex, rowIndex))}\n          </div>\n        )\n      })}\n      <div className=\"status\">\n        <div>{status}</div>\n        <button\n          type=\"button\"\n          class=\"btn btn-dark\"\n          value=\"reload\"\n          onClick={() => window.location.reload()}\n        >\n          Restart\n        </button>\n      </div>\n    </div>\n  )\n}\n\nfunction Game() {\n  return (\n    <div className=\"gameBoard\">\n      <h1>Gomoku</h1>\n      <Board />\n    </div>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Game from './Game'\n\nReactDOM.render(<Game />, document.getElementById('root'))\n\n// 勝利條件\nexport function calculateWinner(y, x, arr, chessColor) {\n  let n1 = 0\n  let n2 = 0\n  let n3 = 0\n  let n4 = 0\n\n  // 左右\n  // 往左找\n  for (let i = x - 1; i >= 0; i--) {\n    if (arr[y][i] !== chessColor) {\n      break\n    }\n    n1++\n  }\n  // 往右找\n  for (let i = x + 1; i < 19; i++) {\n    if (arr[y][i] !== chessColor) {\n      break\n    }\n    n1++\n  }\n\n  // 上下\n  //往上找\n  for (let i = y - 1; i >= 0; i--) {\n    if (arr[i][x] !== chessColor) {\n      break\n    }\n    n2++\n  }\n  // 往下找\n  for (let i = y + 1; i < 19; i++) {\n    if (arr[i][x] !== chessColor) {\n      break\n    }\n    n2++\n  }\n\n  //左上右下\n  // 左上\n  for (let i = x - 1, j = y - 1; i >= 0 || j >= 0; i--, j--) {\n    if (i < 0 || j < 0 || arr[j][i] !== chessColor) {\n      break\n    }\n    n3++\n  }\n  // 右下\n  for (let i = x + 1, j = y + 1; i < 19 || j < 19; i++, j++) {\n    if (i >= 19 || j >= 19 || arr[j][i] !== chessColor) {\n      break\n    }\n    n3++\n  }\n  // 右上左下\n  // 右上\n  for (let i = x - 1, j = y + 1; i >= 0 || j < 19; i--, j++) {\n    if (i < 0 || j >= 19 || arr[j][i] !== chessColor) {\n      break\n    }\n    n4++\n  }\n\n  // 左下\n  for (let i = x + 1, j = y - 1; i < 19 || j >= 0; i++, j--) {\n    if (i >= 19 || j < 0 || arr[j][i] !== chessColor) {\n      break\n    }\n    n4++\n  }\n\n  if (n1 >= 4 || n2 >= 4 || n3 >= 4 || n4 >= 4) {\n    return chessColor\n  }\n  return null\n}\n"],"sourceRoot":""}